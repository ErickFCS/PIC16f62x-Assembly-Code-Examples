

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                                           Thu Oct 10 12:48:41 2024


     1                           	processor	16F628A
     2                           	pagewidth 132
     3                           	psect	udata_shr,global,class=COMMON,space=1,delta=1,noexec
     4                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
     5                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,noexec
     8                           	psect	code,global,class=CODE,delta=2
     9                           	psect	data,global,class=STRCODE,delta=2,noexec
    10                           	psect	edata,global,class=EEDATA,space=3,delta=2,noexec
    11                           	psect	por_vec,global,abs,ovrld,class=CODE,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13     0008                     
    14                           	psect	edata
    15     0000                     stk_offset	set	0
    16     0000                     auto_size	set	0
    17                           
    18                           ; stack_auto defines a symbol /name/_offset which equates to the
    19                           ; stack offset of the auto object in question
    20     0000                     
    21                           ; stack_param defines a symbol /name/_offset which equates to the
    22                           ; stack offset of the parameter object in question
    23     0000                     
    24                           ; alloc_stack adjusts the SP to allocate space for auto objects
    25                           ; it also links in to the btemp symbol so that can be used
    26     0000                     
    27                           ; restore_stack adjusts the SP to remove all auto and parameter
    28                           ; objects from the stack prior to returning from a function
    29     0000                     main:
    30                           
    31                           	psect	por_vec
    32     0000                     	org	0
    33     0000  2012               	call	init
    34     0001                     loop:
    35                           
    36                           ;call work
    37     0001  2801               	goto	loop
    38     0004                     	org	4
    39     0004  00F0               	movwf	112
    40     0005  0E03               	swapf	3,w
    41     0006  00F1               	movwf	113
    42     0007  1303               	bcf	3,6
    43     0008  1283               	bcf	3,5
    44     0009  180B               	btfsc	11,0
    45     000A  2043               	call	interruptRBINT
    46     000B  190B               	btfsc	11,2
    47     000C  2032               	call	interruptTMR0
    48     000D  0E71               	swapf	113,w
    49     000E  0083               	movwf	3
    50     000F  0EF0               	swapf	112,f
    51     0010  0E70               	swapf	112,w
    52     0011  0009               	retfie
    53     0012                     init:	
    54                           ;PSECT por_vec, global, class=CODE, delta=2, abs, ovrld
    55                           ;ORG 0x30
    56                           
    57     0012  1683               	bsf	3,5	; set RP5 to 1 Now in bank 1
    58     0013  1281               	bcf	129,5	; OPTION_REG(5)=0 ((OPTION_REG) and 07Fh), 5=0
    59     0014  1181               	bcf	129,3	; OPTION_REG(3)=0 ((OPTION_REG) and 07Fh), 3=0
    60     0015  1401               	bsf	129,0	; OPTION_REG(0)=1 ((OPTION_REG) and 07Fh), 0=1
    61     0016  1481               	bsf	129,1	; OPTION_REG(1)=1 ((OPTION_REG) and 07Fh), 1=1
    62     0017  1501               	bsf	129,2	; OPTION_REG(2)=1 ((OPTION_REG) and 07Fh), 2=1
    63     0018  30E0               	movlw	224
    64     0019  0085               	movwf	133
    65     001A  30F0               	movlw	240
    66     001B  0086               	movwf	134
    67     001C  1283               	bcf	3,5	; set RP5 to 0 Now in bank 0
    68     001D  3007               	movlw	7	; W=0x07
    69     001E  009F               	movwf	31	; CMCON=W=0x07
    70     001F  3010               	movlw	16
    71     0020  00A1               	movwf	33
    72     0021  3000               	movlw	0
    73     0022  0085               	movwf	5
    74     0023  1406               	bsf	6,0
    75     0024  1086               	bcf	6,1
    76     0025  307D               	movlw	125	; w=0x7D (125)
    77     0026  00A0               	movwf	32	; help=w=0x7D (125)
    78     0027  3083               	movlw	131	; w=0x83 (131 = 256-125)
    79     0028  0081               	movwf	1	; TMR0=w=0x83 (131 = 256-125)
    80     0029  110B               	bcf	11,2	; INTCON(2)=((INTCON) and 07Fh), 2=0
    81     002A  168B               	bsf	11,5	; INTCON(5)=((INTCON) and 07Fh), 5=1
    82     002B  100B               	bcf	11,0	; INTCON(0)=((INTCON) and 07Fh), 0=0
    83     002C  158B               	bsf	11,3	; INTCON(3)=((INTCON) and 07Fh), 3=1
    84     002D  178B               	bsf	11,7	; INTCON(7)=((INTCON) and 07Fh), 7=1
    85     002E  0008               	return
    86     002F                     work:
    87     002F  3003               	movlw	3
    88     0030  0686               	xorwf	6,f
    89     0031  0008               	return
    90     0032                     interruptTMR0:
    91     0032  3003               	movlw	3
    92     0033  0686               	xorwf	6,f
    93     0034  3083               	movlw	131	; w=0x83 (131 = 256-125)
    94     0035  0081               	movwf	1	; TMR0=w=0x83 (131 = 256-125)
    95     0036  110B               	bcf	11,2	; INTCON(2)=((INTCON) and 07Fh), 2=0
    96     0037  0BA0               	decfsz	32,f	; if help - 1 != 0 then:
    97     0038  0008               	return
    98     0039  12A1               	bcf	33,5
    99     003A  1821               	btfsc	33,0
   100     003B  16A1               	bsf	33,5
   101     003C  0C21               	rrf	33,w
   102     003D  00A1               	movwf	33
   103     003E  3A10               	xorlw	16
   104     003F  0085               	movwf	5
   105     0040  307D               	movlw	125	; w=0x7D (125)
   106     0041  00A0               	movwf	32	; help=w=0x7D (125)
   107     0042  0008               	return
   108     0043                     interruptRBINT:
   109     0043  0806               	movf	6,w
   110     0044  3970               	andlw	112
   111     0045  1903               	btfsc	3,2
   112     0046  0008               	return
   113     0047  1A06               	btfsc	6,4
   114     0048  3006               	movlw	6
   115     0049  1A86               	btfsc	6,5
   116     004A  3004               	movlw	4
   117     004B  1B06               	btfsc	6,6
   118     004C  3002               	movlw	2
   119     004D  1806               	btfsc	6,0
   120     004E  3E01               	addlw	1
   121     004F  1683               	bsf	3,5	; set RP5 to 1 Now in bank 1
   122     0050  00A0               	movwf	160
   123     0051  0801               	movf	129,w
   124     0052  39F8               	andlw	248
   125     0053  0420               	iorwf	160,w
   126     0054  0081               	movwf	129
   127     0055  1283               	bcf	3,5	; set RP5 to 0 Now in bank 0
   128     0056  0886               	movf	6,f
   129     0057  100B               	bcf	11,0
   130     0058  0008               	return
   131                           
   132                           	psect	config
   133                           
   134                           ;Config register CONFIG @ 0x2007
   135                           ;	Oscillator Selection bits
   136                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/
      +                          CLKIN
   137                           ;	Watchdog Timer Enable bit
   138                           ;	WDTE = OFF, WDT disabled
   139                           ;	Power-up Timer Enable bit
   140                           ;	PWRTE = OFF, PWRT disabled
   141                           ;	RA5/MCLR/VPP Pin Function Select bit
   142                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
   143                           ;	Brown-out Detect Enable bit
   144                           ;	BOREN = ON, BOD enabled
   145                           ;	Low-Voltage Programming Enable bit
   146                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programming
   147                           ;	Data EE Memory Code Protection bit
   148                           ;	CPD = OFF, Data memory code protection off
   149                           ;	Flash Program Memory Code Protection bit
   150                           ;	CP = OFF, Code protection off
   151     2007                     	org	8199
   152     2007  3F58               	dw	16216


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                               Thu Oct 10 12:48:41 2024

                      TMR0 0001                        help 0020                        main 0000                        init 0012  
                      loop 0001                        work 002F                       CMCON 001F                       PORTA 0005  
                     PORTB 0006                       TRISA 0085                       TRISB 0086                       W_AUX 0070  
                    INTCON 000B                      STATUS 0003              interruptRBINT 0043                  OPTION_REG 0081  
                STATUS_AUX 0071               interruptTMR0 0032                virtualPORTA 0021           virtualOPTION_REG 00A0  
